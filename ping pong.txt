# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
paddle1_pos = (HEIGHT - PAD_HEIGHT)/2
paddle2_pos = (HEIGHT - PAD_HEIGHT)/2
paddle1_vel = 0
paddle2_vel = 0
score1 = 0
score2 = 0

# initialize ball_pos and ball_vel for new bal in middle of table
ball_pos =[WIDTH/2,HEIGHT/2]
ball_vel = [0,1]

# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos =[WIDTH/2,HEIGHT/2]
    
    if direction == RIGHT:
        ball_vel[0] = random.randrange(120,240) / 60
        ball_vel[1] = - random.randrange(60,180) / 60
    if direction == LEFT:
        ball_vel[0] = - random.randrange(120,240) / 60
        ball_vel[1] = - random.randrange(60,180) / 60
        
        
    
    


# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    score1 = 0
    score2 = 0
    spawn_ball(random.choice([LEFT, RIGHT]))

def draw(c):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel, paddle1_vel, paddle2_vel
 
        
    # draw mid line and gutters
    c.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    c.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    c.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
    
        
    # update ball
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
    if ball_pos[1] <= BALL_RADIUS:
        ball_vel[1] = - ball_vel[1]
    elif ball_pos[1] >= HEIGHT - 1 - BALL_RADIUS:
        ball_vel[1] = - ball_vel[1]
    elif ball_pos[0] >= WIDTH - PAD_WIDTH - 1 - BALL_RADIUS:
        if paddle2_pos <= ball_pos[1] <= (paddle2_pos + 80):
            ball_vel[0] = - 1.1 *ball_vel[0] 
        else:
            score1 += 1
            spawn_ball(LEFT)
    elif ball_pos[0] <= PAD_WIDTH + BALL_RADIUS:
         if paddle1_pos <= ball_pos[1] <= (paddle1_pos + 80):
            ball_vel[0] = - 1.1 *ball_vel[0]
         else:
                
                score2 += 1
                spawn_ball(RIGHT)
            
    # draw ball
    c.draw_circle(ball_pos, BALL_RADIUS, 1, "Red", "Red")
    
    # update paddle's vertical position, keep paddle on the screen
    if paddle1_pos + paddle1_vel <= 0:
        paddle1_pos = 0
    elif paddle1_pos + paddle1_vel >= HEIGHT - PAD_HEIGHT:
        paddle1_pos = HEIGHT - PAD_HEIGHT
    else:
        paddle1_pos += paddle1_vel
    if paddle2_pos + paddle2_vel <= 0:
        paddle2_pos = 0
    elif paddle2_pos + paddle2_vel >= HEIGHT - PAD_HEIGHT:
        paddle2_pos = HEIGHT - PAD_HEIGHT
    else:
        paddle2_pos += paddle2_vel
    
    # draw paddles
    c.draw_line([4,paddle1_pos], [4,paddle1_pos + 80], PAD_WIDTH, "Green")
    c.draw_line([596,paddle2_pos], [596,paddle2_pos + 80], PAD_WIDTH, "Green")
    
    # draw scores
    c.draw_text(str(score1),[150,50],40,"White")
    c.draw_text(str(score2), [450,50], 40, "White")
        
def keydown(key):
    global paddle1_vel, paddle2_vel
    acc = 4
    if key == simplegui.KEY_MAP["s"]:
        paddle1_vel += acc
    elif key == simplegui.KEY_MAP["w"]:
        paddle1_vel -= acc
    if key == simplegui.KEY_MAP["up"]:
        paddle2_vel -= acc
    elif key == simplegui.KEY_MAP["down"]:
        paddle2_vel += acc
   
def keyup(key):
    global paddle1_vel, paddle2_vel
    acc = 4
    if key == simplegui.KEY_MAP["s"]:
        paddle1_vel -= acc
    elif key == simplegui.KEY_MAP["w"]:
        paddle1_vel += acc
    if key == simplegui.KEY_MAP["up"]:
        paddle2_vel += acc
    elif key == simplegui.KEY_MAP["down"]:
        paddle2_vel -= acc


# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
button1 = frame.add_button("Restart", new_game, 100)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)


# start frame
new_game()
frame.start()
